// var dataset = ee.FeatureCollection('USDOS/LSIB/2017');
// var styleParams = {
//   fillColor: 'b5ffb4',
//   color: '00909F',
//   width: 3.0,
// };
// var countries = dataset.style(styleParams);
// var geometry = dataset.filterMetadata('COUNTRY_NA','equals','Germany');
Map.setCenter(10.50, 51.00, 5);
Map.addLayer(geometry, {}, 'Brandenburg');

//maskin functions 
var maskClouds = function(image) {
  // Select the QA band.
  var QA = image.select('StateQA')
  // Make a mask to get bit 10, the internal_cloud_algorithm_flag bit.
  var bitMask = 1 << 10;
  // Return an image masking out cloudy areas.
  return image.updateMask(QA.bitwiseAnd(bitMask).eq(0))
}


var dataset = ee.ImageCollection('MODIS/006/MOD09A1')
  .map(maskClouds);
print (dataset)

var start_day = 121;// July 1
var end_day = 181;// October 1

var filtered = dataset
  .filter(ee.Filter.date('2001-01-01', '2019-12-31'))
  .filter(ee.Filter.bounds(geometry))
  .filter(ee.Filter.calendarRange(start_day,end_day))
  //.map(function(image){return image.clip(geometry)});
print (filtered)

function addNDVI(image) {
  var ndvi = image.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']).rename('ndvi');
  return image.addBands(ndvi);
}
// Map the function over the collection
var withNdvi = filtered.map(addNDVI);
print (withNdvi)

function addEVI (image) {
  var evi = image.expression(
      '2.5 * ((NIR - RED) / (NIR + 6*RED - 7.5*BLUE + 1))', {
        'NIR': image.select('sur_refl_b02').multiply(0.0001),
        'RED': image.select('sur_refl_b01').multiply(0.0001),
        'BLUE': image.select('sur_refl_b03').multiply(0.0001),
  }).rename('evi');
  return image.addBands(evi)
}
// Map the function over the collection
var withNdviEvi = withNdvi.map(addEVI);
print (withNdviEvi) 

var ndviVis = {
  min: 0.0,
  max: 0.9,
  palette: [
    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301'
  ],
};
Map.addLayer(withNdviEvi.select('ndvi').mean().clip(geometry), ndviVis, 'NDVI');

// Display a time-series chart
// NDVI
var chart = ui.Chart.image.series({
  imageCollection: withNdviEvi.select('ndvi'),
  region: geometry,
  reducer: ee.Reducer.mean(),
  scale: 500
}).setOptions({
      lineWidth: 1,
      title: 'NDVI Time Series',
      interpolateNulls: true,
      vAxis: {title: 'NDVI'},
      hAxis: {title: '', format: 'YYYY-MMM'}
    })
print(chart);

// EVI
var chart = ui.Chart.image.series({
  imageCollection: withNdviEvi.select('evi'),
  region: geometry,
  reducer: ee.Reducer.mean(),
  scale: 500
}).setOptions({
      lineWidth: 1,
      title: 'EVI Time Series',
      interpolateNulls: true,
      vAxis: {title: 'EVI'},
      hAxis: {title: '', format: 'YYYY-MMM'}
    })
print(chart);

//////////////////////////////////////////////////////

var addMask = function(image) {
  return image.select('LC_Type1').updateMask(image.eq(12));
};

// Map the function over the collection and display the result.

var dataset = ee.ImageCollection('MODIS/006/MCD12Q1');
var igbpLandCover = dataset.select('LC_Type1');
var igbpLandCoverVis = {
  min: 1.0,
  max: 17.0,
  palette: [
    '05450a', '086a10', '54a708', '78d203', '009900', 'c6b044', 'dcd159',
    'dade48', 'fbff13', 'b6ff05', '27ff87', 'c24f44', 'a5a5a5', 'ff6d4c',
    '69fff8', 'f9ffa4', '1c0dff'
  ],
};


var stacked_coll = igbpLandCover.map(addMask)
print (igbpLandCover.first())
print(stacked_coll)
Map.addLayer(stacked_coll.first().clip(geometry), igbpLandCoverVis, 'LC')

var typeMaskNDVI_func = function(image){
  // create a year which will be used to link the crop mask with ndiv
  var image_year = ee.Date(image.get('system:time_start')).get("year");
  var crop = stacked_coll // get the crop mask
    .filterDate(ee.Date.fromYMD(image_year, 1, 1))
    .first();
  var temp_image = ee.Image([image,crop]);
  var temp_mask = temp_image.select("LC_Type1")
  return temp_image.select("ndvi").updateMask(temp_mask);
};
// apply to NDVI collection
var typeMasked_ndvi = withNdviEvi.map(typeMaskNDVI_func);

Map.addLayer(typeMasked_ndvi.select('ndvi').mean().clip(geometry), ndviVis, 'NDVI  type masked');

var typeMaskEVI_func = function(image){
  // create a year which will be used to link the crop mask with evi
  var image_year = ee.Date(image.get('system:time_start')).get("year");
  var crop = stacked_coll // get the crop mask
    .filterDate(ee.Date.fromYMD(image_year, 1, 1))
    .first();
  var temp_image = ee.Image([image,crop]);
  var temp_mask = temp_image.select("LC_Type1")
  return temp_image.select("evi").updateMask(temp_mask);
};
// apply to EVI collection
var typeMasked_evi = withNdviEvi.map(typeMaskEVI_func);

Map.addLayer(typeMasked_evi.select('evi').mean().clip(geometry), ndviVis, 'EVI  type masked');


print (typeMasked_ndvi)
print (typeMasked_evi)

////////////////////////////////////////////////////

var featureSizeNDVI = typeMasked_ndvi.size()
var testTable1 = geometry.limit(1140); // Do this outside map()s and loops.
print (testTable1)

var dataNDVI = typeMasked_ndvi.map(function(image) {
  return image.reduceRegions({
    collection: testTable1, 
    reducer: ee.Reducer.mean(), 
    scale: 500
  }).map(function(f) {
    return f.set({
      time: image.date().millis(),
      date: image.date().format()
    })
  })
}).flatten()
print(dataNDVI.size());
Map.addLayer(dataNDVI, igbpLandCoverVis, 'dataNDVI')


Export.table.toDrive({
  collection: dataNDVI,
  description: 'dataNDVI',
  fileFormat: 'CSV'
});

///////
var featureSizeEVI = typeMasked_evi.size()
var testTable2 = geometry.limit(1140); // Do this outside map()s and loops.
print (testTable2)

var dataEVI = typeMasked_evi.map(function(image) {
  return image.reduceRegions({
    collection: testTable2, 
    reducer: ee.Reducer.mean(), 
    scale: 500
  }).map(function(f) {
    return f.set({
      time: image.date().millis(),
      date: image.date().format()
    })
  })
}).flatten()
print(dataEVI.size());
Map.addLayer(dataEVI, igbpLandCoverVis, 'dataEVI')


Export.table.toDrive({
  collection: dataEVI,
  description: 'dataEVI',
  fileFormat: 'CSV'
});
